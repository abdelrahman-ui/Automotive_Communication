
Main_MCP2515.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004f0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000113a  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086c  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b4  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000709  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  00003155  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003ac3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 21 01 	call	0x242	; 0x242 <main>
  7a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_VidSetPinDirection>:
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	a1 f5       	brne	.+104    	; 0xee <DIO_VidSetPinDirection+0x6c>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_VidSetPinDirection+0x2a>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_VidSetPinDirection+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_VidSetPinDirection+0x40>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_VidSetPinDirection+0x56>
  94:	08 95       	ret
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_VidSetPinDirection+0x1e>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_VidSetPinDirection+0x1a>
  a4:	9a b3       	in	r25, 0x1a	; 26
  a6:	89 2b       	or	r24, r25
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_VidSetPinDirection+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_VidSetPinDirection+0x30>
  ba:	97 b3       	in	r25, 0x17	; 23
  bc:	89 2b       	or	r24, r25
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_VidSetPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_VidSetPinDirection+0x46>
  d0:	94 b3       	in	r25, 0x14	; 20
  d2:	89 2b       	or	r24, r25
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_VidSetPinDirection+0x60>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_VidSetPinDirection+0x5c>
  e6:	91 b3       	in	r25, 0x11	; 17
  e8:	89 2b       	or	r24, r25
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	41 11       	cpse	r20, r1
  f0:	37 c0       	rjmp	.+110    	; 0x160 <DIO_VidSetPinDirection+0xde>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <DIO_VidSetPinDirection+0x98>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_VidSetPinDirection+0x80>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <DIO_VidSetPinDirection+0xb0>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <DIO_VidSetPinDirection+0xc8>
 100:	08 95       	ret
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_VidSetPinDirection+0x8a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_VidSetPinDirection+0x86>
 110:	80 95       	com	r24
 112:	9a b3       	in	r25, 0x1a	; 26
 114:	89 23       	and	r24, r25
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_VidSetPinDirection+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_VidSetPinDirection+0x9e>
 128:	80 95       	com	r24
 12a:	97 b3       	in	r25, 0x17	; 23
 12c:	89 23       	and	r24, r25
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_VidSetPinDirection+0xba>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_VidSetPinDirection+0xb6>
 140:	80 95       	com	r24
 142:	94 b3       	in	r25, 0x14	; 20
 144:	89 23       	and	r24, r25
 146:	84 bb       	out	0x14, r24	; 20
 148:	08 95       	ret
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_VidSetPinDirection+0xd2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_VidSetPinDirection+0xce>
 158:	80 95       	com	r24
 15a:	91 b3       	in	r25, 0x11	; 17
 15c:	89 23       	and	r24, r25
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_VidSetPinValue>:
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	a1 f5       	brne	.+104    	; 0x1ce <DIO_VidSetPinValue+0x6c>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	89 f0       	breq	.+34     	; 0x18c <DIO_VidSetPinValue+0x2a>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_VidSetPinValue+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	c9 f0       	breq	.+50     	; 0x1a2 <DIO_VidSetPinValue+0x40>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	11 f1       	breq	.+68     	; 0x1b8 <DIO_VidSetPinValue+0x56>
 174:	08 95       	ret
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_VidSetPinValue+0x1e>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_VidSetPinValue+0x1a>
 184:	9b b3       	in	r25, 0x1b	; 27
 186:	89 2b       	or	r24, r25
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_VidSetPinValue+0x34>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_VidSetPinValue+0x30>
 19a:	98 b3       	in	r25, 0x18	; 24
 19c:	89 2b       	or	r24, r25
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	08 95       	ret
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_VidSetPinValue+0x4a>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_VidSetPinValue+0x46>
 1b0:	95 b3       	in	r25, 0x15	; 21
 1b2:	89 2b       	or	r24, r25
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	08 95       	ret
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_VidSetPinValue+0x60>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_VidSetPinValue+0x5c>
 1c6:	92 b3       	in	r25, 0x12	; 18
 1c8:	89 2b       	or	r24, r25
 1ca:	82 bb       	out	0x12, r24	; 18
 1cc:	08 95       	ret
 1ce:	41 11       	cpse	r20, r1
 1d0:	37 c0       	rjmp	.+110    	; 0x240 <DIO_VidSetPinValue+0xde>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 f0       	breq	.+36     	; 0x1fa <DIO_VidSetPinValue+0x98>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <DIO_VidSetPinValue+0x80>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	d9 f0       	breq	.+54     	; 0x212 <DIO_VidSetPinValue+0xb0>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	29 f1       	breq	.+74     	; 0x22a <DIO_VidSetPinValue+0xc8>
 1e0:	08 95       	ret
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_VidSetPinValue+0x8a>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_VidSetPinValue+0x86>
 1f0:	80 95       	com	r24
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	89 23       	and	r24, r25
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_VidSetPinValue+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_VidSetPinValue+0x9e>
 208:	80 95       	com	r24
 20a:	98 b3       	in	r25, 0x18	; 24
 20c:	89 23       	and	r24, r25
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_VidSetPinValue+0xba>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_VidSetPinValue+0xb6>
 220:	80 95       	com	r24
 222:	95 b3       	in	r25, 0x15	; 21
 224:	89 23       	and	r24, r25
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_VidSetPinValue+0xd2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_VidSetPinValue+0xce>
 238:	80 95       	com	r24
 23a:	92 b3       	in	r25, 0x12	; 18
 23c:	89 23       	and	r24, r25
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <main>:
/*============= INCLUDE HAL =============*/
#include "MCP2515_t_interface.h"

/*=======================================*/
int main(void)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	28 97       	sbiw	r28, 0x08	; 8
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
   MCP2515_vInit();
 256:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_vInit>
   u8 msgData[]={'a','b','c','d','e','f','g','h'};
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	e0 e6       	ldi	r30, 0x60	; 96
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	de 01       	movw	r26, r28
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	8a 95       	dec	r24
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x22>
   
    while (1) 
    {
		/* SEND ( Buffer , Massage ID   , DLC = Lenght & data   */
		MCP2515_vSendMassage(0, 0x7e1 , 8 , msgData );   
 26c:	8e 01       	movw	r16, r28
 26e:	0f 5f       	subi	r16, 0xFF	; 255
 270:	1f 4f       	sbci	r17, 0xFF	; 255
 272:	28 e0       	ldi	r18, 0x08	; 8
 274:	41 ee       	ldi	r20, 0xE1	; 225
 276:	57 e0       	ldi	r21, 0x07	; 7
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 ce 01 	call	0x39c	; 0x39c <MCP2515_vSendMassage>
		for(u8 i=0;i<8;i++)
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0a c0       	rjmp	.+20     	; 0x29a <main+0x58>
		{
			msgData[i]++;
 286:	e1 e0       	ldi	r30, 0x01	; 1
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	e8 0f       	add	r30, r24
 290:	f1 1d       	adc	r31, r1
 292:	90 81       	ld	r25, Z
 294:	9f 5f       	subi	r25, 0xFF	; 255
 296:	90 83       	st	Z, r25
   
    while (1) 
    {
		/* SEND ( Buffer , Massage ID   , DLC = Lenght & data   */
		MCP2515_vSendMassage(0, 0x7e1 , 8 , msgData );   
		for(u8 i=0;i<8;i++)
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	a0 f3       	brcs	.-24     	; 0x286 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	2f e3       	ldi	r18, 0x3F	; 63
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x62>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x6c>
 2ae:	00 00       	nop
 2b0:	dd cf       	rjmp	.-70     	; 0x26c <main+0x2a>

000002b2 <MCP2515_u8ReadRegiter>:


/*======================================================== Start_FUNCTION  ========================================================*/

u8 MCP2515_u8ReadRegiter(u8 Copy_RegAdress)
{
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
	/* Var to read  register */
   u8 Local_u8ReadData = 0 ;
	/* Enable SPI SS (Nude)  */
  SPI_VidChipSelect(1) ;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
	/* Send Read Instruction */
  SPI_U8MasterTransmit(READ_IS); 
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send Addres os Register */
  SPI_U8MasterTransmit(Copy_RegAdress); 
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send Any Massage & Resive Data to return data  */
  Local_u8ReadData=SPI_U8MasterTransmit(0); 
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
 2ce:	c8 2f       	mov	r28, r24
    /* must Disable SPI SS (Nude)  */
  SPI_VidChipSelect(0);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
  return Local_u8ReadData ;
}
 2d6:	8c 2f       	mov	r24, r28
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <MCP2515_vWriteRegiter>:


/*======================================================== Start_FUNCTION  ========================================================*/

void MCP2515_vWriteRegiter(u8 Copy_RegAdress ,  u8 Copy_Data)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	d8 2f       	mov	r29, r24
 2e2:	c6 2f       	mov	r28, r22
	/* Enable SPI SS (Nude)  */	
 SPI_VidChipSelect(1) ;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
	/* Send Read Instruction */
 SPI_U8MasterTransmit(WRITE_IS);
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
 	/* Send Address*/
 SPI_U8MasterTransmit(Copy_RegAdress);
 2f0:	8d 2f       	mov	r24, r29
 2f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send Data*/
 SPI_U8MasterTransmit(Copy_Data);
 2f6:	8c 2f       	mov	r24, r28
 2f8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Disable SPI SS (Nude) */
 SPI_VidChipSelect(0);	
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <MCP2515_vReseat>:

/*======================================================== Start_FUNCTION  ========================================================*/
void MCP2515_vReseat()
{
	/* Enable SPI SS (Nude)  */
 SPI_VidChipSelect(1) ;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
	/* Send Reseat Instruction */
 SPI_U8MasterTransmit(REST_IS);
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Disable SPI SS (Nude) */
 SPI_VidChipSelect(0);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
 31a:	08 95       	ret

0000031c <MCP2515_vModify>:


/*======================================================== Start_FUNCTION  ========================================================*/
/* To change spasific bits in REG  like |= */
void MCP2515_vModify(u8 Copy_u8RegAdress , u8 Copy_u8Mask  ,u8 Copy_u8Data)
{
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	18 2f       	mov	r17, r24
 324:	d6 2f       	mov	r29, r22
 326:	c4 2f       	mov	r28, r20
	/* Enable SPI SS (Nude)  */
 SPI_VidChipSelect(1) ;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
	/* Send Read Instruction */
 SPI_U8MasterTransmit(MODIFY_IS);
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send Address*/
 SPI_U8MasterTransmit(Copy_u8RegAdress);
 334:	81 2f       	mov	r24, r17
 336:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send The place of the bit you wont to modify it */
 SPI_U8MasterTransmit(Copy_u8Mask);
 33a:	8d 2f       	mov	r24, r29
 33c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Send Modifay data*/
 SPI_U8MasterTransmit(Copy_u8Data);
 340:	8c 2f       	mov	r24, r28
 342:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	/* Disable SPI SS (Nude) */
 SPI_VidChipSelect(0);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	08 95       	ret

00000354 <MCP2515_vSetBitTiming>:

/*======================================================== Start_FUNCTION  ========================================================*/

void MCP2515_vSetBitTiming(u8 Copy_u8Cnf1Val , u8 Copy_u8Cnf2Val ,u8 Copy_u8Cnf3Val )
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	d6 2f       	mov	r29, r22
 35a:	c4 2f       	mov	r28, r20
		/* Change mode to configration mode  */
	
		/* Write on CNF1 */
	MCP2515_vWriteRegiter(CNF1 ,Copy_u8Cnf1Val );
 35c:	68 2f       	mov	r22, r24
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MCP2515_vWriteRegiter>
		/* Write on CNF2 */
	MCP2515_vWriteRegiter(CNF2 ,Copy_u8Cnf2Val );
 364:	6d 2f       	mov	r22, r29
 366:	89 e2       	ldi	r24, 0x29	; 41
 368:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MCP2515_vWriteRegiter>
		/* Write on CNF3 */
	MCP2515_vWriteRegiter(CNF3 ,Copy_u8Cnf3Val );
 36c:	6c 2f       	mov	r22, r28
 36e:	88 e2       	ldi	r24, 0x28	; 40
 370:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MCP2515_vWriteRegiter>
	
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <MCP2515_vSetMode>:


/*======================================================== Start_FUNCTION  ========================================================*/
  /* MUST be configration mode in configration but after config when used make it Normal mode */
void MCP2515_vSetMode(u8 Copy_u8Mode)
{
 37a:	cf 93       	push	r28
 37c:	c8 2f       	mov	r28, r24
		/* Write only at last 3 bit ( 0XE0 : 0b1110 000)  & Sheft 5 untile pins of mode */
	MCP2515_vModify(CAN_CTRL,0xE0,(Copy_u8Mode<<5));
 37e:	48 2f       	mov	r20, r24
 380:	42 95       	swap	r20
 382:	44 0f       	add	r20, r20
 384:	40 7e       	andi	r20, 0xE0	; 224
 386:	60 ee       	ldi	r22, 0xE0	; 224
 388:	8f e0       	ldi	r24, 0x0F	; 15
 38a:	0e 94 8e 01 	call	0x31c	; 0x31c <MCP2515_vModify>
		/* Check the state changed or not read last 3 bit in canstate*/
	while(MCP2515_u8ReadRegiter(CAN_STAT>>5) !=Copy_u8Mode);   
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 59 01 	call	0x2b2	; 0x2b2 <MCP2515_u8ReadRegiter>
 394:	c8 13       	cpse	r28, r24
 396:	fb cf       	rjmp	.-10     	; 0x38e <MCP2515_vSetMode+0x14>
	
	
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <MCP2515_vSendMassage>:
  

/*======================================================== Start_FUNCTION  ========================================================*/

void MCP2515_vSendMassage(u8 Copy_u8BufferId , u32 Copy_u32MassageId , u8 Copy_u8DLC , u8 * Copy_Ptru8Data )
{
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	6a 01       	movw	r12, r20
 3ae:	7b 01       	movw	r14, r22
 3b0:	d2 2f       	mov	r29, r18
		/* Take the bus */
	SPI_VidChipSelect(1) ;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
		/* Send Write Instruction */
	SPI_U8MasterTransmit(WRITE_IS);
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Send Address & must write value from ctrl reg and it will increase automatic it's u32. Here must be for buffer choise  */
	SPI_U8MasterTransmit(TXB0CTRL);
 3be:	80 e3       	ldi	r24, 0x30	; 48
 3c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* You can writ value to choice priority the other bit not care 
			Any value  but mandatory to write*/
	SPI_U8MasterTransmit(Copy_u8DLC >> 6) ;	
 3c4:	8d 2f       	mov	r24, r29
 3c6:	82 95       	swap	r24
 3c8:	86 95       	lsr	r24
 3ca:	86 95       	lsr	r24
 3cc:	83 70       	andi	r24, 0x03	; 3
 3ce:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Now with ID High that take ftom 3 : 10 */
	SPI_U8MasterTransmit((u8) (Copy_u32MassageId >> 3) ) ;
 3d2:	d7 01       	movw	r26, r14
 3d4:	c6 01       	movw	r24, r12
 3d6:	68 94       	set
 3d8:	12 f8       	bld	r1, 2
 3da:	b6 95       	lsr	r27
 3dc:	a7 95       	ror	r26
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	16 94       	lsr	r1
 3e4:	d1 f7       	brne	.-12     	; 0x3da <MCP2515_vSendMassage+0x3e>
 3e6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Now with ID Low 0 : 2*/
	SPI_U8MasterTransmit((u8) (Copy_u32MassageId << 5) ) ;
 3ea:	8c 2d       	mov	r24, r12
 3ec:	82 95       	swap	r24
 3ee:	88 0f       	add	r24, r24
 3f0:	80 7e       	andi	r24, 0xE0	; 224
 3f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* For Extend i'm not need need it so send any value for high and low */
	SPI_U8MasterTransmit(0);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(0);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Send DLC frist 4 bit the bigest value 1000 even if you write 1111 it will write 1000 */
	SPI_U8MasterTransmit(Copy_u8DLC& 0x0f);
 402:	df 70       	andi	r29, 0x0F	; 15
 404:	8d 2f       	mov	r24, r29
 406:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Send data */
	for(u8 Local_u8Count = 0 ; Local_u8Count < (Copy_u8DLC& 0x0f) ; Local_u8Count ++ )
 40a:	c0 e0       	ldi	r28, 0x00	; 0
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{	
			SPI_U8MasterTransmit(Copy_Ptru8Data[Local_u8Count]);	
 40e:	f8 01       	movw	r30, r16
 410:	ec 0f       	add	r30, r28
 412:	f1 1d       	adc	r31, r1
 414:	80 81       	ld	r24, Z
 416:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
	SPI_U8MasterTransmit(0);
	SPI_U8MasterTransmit(0);
		/* Send DLC frist 4 bit the bigest value 1000 even if you write 1111 it will write 1000 */
	SPI_U8MasterTransmit(Copy_u8DLC& 0x0f);
		/* Send data */
	for(u8 Local_u8Count = 0 ; Local_u8Count < (Copy_u8DLC& 0x0f) ; Local_u8Count ++ )
 41a:	cf 5f       	subi	r28, 0xFF	; 255
 41c:	8c 2f       	mov	r24, r28
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	4d 2f       	mov	r20, r29
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	84 17       	cp	r24, r20
 426:	95 07       	cpc	r25, r21
 428:	94 f3       	brlt	.-28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{	
			SPI_U8MasterTransmit(Copy_Ptru8Data[Local_u8Count]);	
		}
		/* Now Lelease bus */
	SPI_VidChipSelect(0);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
		/* Take the bus */	
	SPI_VidChipSelect(1);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
		/* Now must send request to send for buffer 0*/
	SPI_U8MasterTransmit(MCP2515_REQ2SEND_B0);
 436:	81 e8       	ldi	r24, 0x81	; 129
 438:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_U8MasterTransmit>
		/* Now Lelease bus */
	SPI_VidChipSelect(0);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <SPI_VidChipSelect>
		
}
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	08 95       	ret

00000454 <MCP2515_vInit>:
/*======================================================== Start_FUNCTION  ========================================================*/

void MCP2515_vInit(void)
{
		/* Must init SPI  */
	SPI_VidMasterInit();
 454:	0e 94 40 02 	call	0x480	; 0x480 <SPI_VidMasterInit>
		/* Reseat   */
	MCP2515_vReseat() ;
 458:	0e 94 84 01 	call	0x308	; 0x308 <MCP2515_vReseat>
		/* Set configration mode and enable clk  */
	MCP2515_vWriteRegiter(CAN_CTRL , 0X84) ;
 45c:	64 e8       	ldi	r22, 0x84	; 132
 45e:	8f e0       	ldi	r24, 0x0F	; 15
 460:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MCP2515_vWriteRegiter>
		/* Check the state changed or not read last 3 bit in canstate*/
	while(MCP2515_u8ReadRegiter(CAN_STAT>>5) !=MCP2515_MODE_CONFIG);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 59 01 	call	0x2b2	; 0x2b2 <MCP2515_u8ReadRegiter>
 46a:	84 30       	cpi	r24, 0x04	; 4
 46c:	d9 f7       	brne	.-10     	; 0x464 <MCP2515_vInit+0x10>
		/* Set Value of CNF1 & CNF2 & CNF3*/
	MCP2515_vSetBitTiming( CNF1_REG,CNF2_REG  ,CNF3_REG ) ; 
 46e:	45 e0       	ldi	r20, 0x05	; 5
 470:	61 eb       	ldi	r22, 0xB1	; 177
 472:	80 e8       	ldi	r24, 0x80	; 128
 474:	0e 94 aa 01 	call	0x354	; 0x354 <MCP2515_vSetBitTiming>
		/* Return to Normal mode To send and recive */
	MCP2515_vSetMode(MCP2515_MODE_NORMAL) ;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 bd 01 	call	0x37a	; 0x37a <MCP2515_vSetMode>
 47e:	08 95       	ret

00000480 <SPI_VidMasterInit>:
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	65 e0       	ldi	r22, 0x05	; 5
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	66 e0       	ldi	r22, 0x06	; 6
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	66 e0       	ldi	r22, 0x06	; 6
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	67 e0       	ldi	r22, 0x07	; 7
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	64 e0       	ldi	r22, 0x04	; 4
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_VidSetPinDirection>
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4bc:	8e b1       	in	r24, 0x0e	; 14
 4be:	8e 7f       	andi	r24, 0xFE	; 254
 4c0:	8e b9       	out	0x0e, r24	; 14
 4c2:	80 e5       	ldi	r24, 0x50	; 80
 4c4:	8d b9       	out	0x0d, r24	; 13
 4c6:	08 95       	ret

000004c8 <SPI_VidChipSelect>:
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	29 f4       	brne	.+10     	; 0x4d6 <SPI_VidChipSelect+0xe>
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	64 e0       	ldi	r22, 0x04	; 4
 4d0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4d4:	08 95       	ret
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	64 e0       	ldi	r22, 0x04	; 4
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_VidSetPinValue>
 4e0:	08 95       	ret

000004e2 <SPI_U8MasterTransmit>:
 4e2:	8f b9       	out	0x0f, r24	; 15
 4e4:	77 9b       	sbis	0x0e, 7	; 14
 4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <SPI_U8MasterTransmit+0x2>
 4e8:	8f b1       	in	r24, 0x0f	; 15
 4ea:	08 95       	ret

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
